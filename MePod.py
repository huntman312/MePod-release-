#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Jan 23, 2021 01:00:22 AM EST  platform: Windows NT

import sys
import re
import os
from ast import literal_eval
from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus.tables import Table
import datetime
from reportlab.lib import colors
from reportlab.platypus import TableStyle
from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus.tables import Table
from reportlab.lib.pagesizes import letter

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True



def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    root.mainloop()


w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    check = False
    counter = 0
    system = sys.platform
    path = os.getcwd()
    finalPartsList = [["TOOL", "QUANTITY", "PART#", "DESCRIPTION"]]

    def date_of_order(self):
        d = datetime.datetime.today()
        return str(d.month) + "-" + str(d.day) + "-" + str(d.year)


    def toolDataBase(self):
        b = self.toolBrand.get()
        m = re.sub('[/]', '@', self.toolModel.get())
        filePath = self.path + "/" + "TOOL_DATABASE" + \
            "/" + b + "/" + m
        finalPath = str(filePath)

        with open(finalPath, "r") as toolTextFile:
            toolDict = toolTextFile.read()
            return literal_eval(toolDict)


    def modelList(self, *args):
        self.toolModel.delete(0, "end")
        sel = self.toolBrand.get()
        List1 = os.listdir(self.path + "/TOOL_DATABASE/" + sel)
        List2 = []
        for x in List1:
            a = x.replace("@", "/")
            List2.append(a)

        ListB = List2
        self.toolModel.config(values=ListB)


    ListA = os.listdir(str(path + "/" + "TOOL_DATABASE"))
    ListB = []


    def dataAdd(self):
        dbrand = addbrand.get().upper()
        dmodel = addmodel.get().upper()
        key = addschemNum.get().upper()
        dpart = addPartNum.get().upper()
        ddesc = adddesentry.get().upper()
        dir1 = dbrand
        check = dmodel.replace('/', '@')
        if not os.path.exists(path + "/" + "TOOL_DATABASE" + "/" + dir1):
            os.mkdir(path + "/" + "TOOL_DATABASE" + "/" + dir1)
            file1 = os.path.join(path + "/" + "TOOL_DATABASE" +
                                "/" + dir1, check)
        else:
            file1 = os.path.join(path + "/" + "TOOL_DATABASE" +
                                "/" + dir1, check)
        finalPath = file1
        if os.path.isfile(finalPath) == False:
            toolFile = open(finalPath, "w")
            toolDict = {}
            toolDict[key] = dpart, ddesc
            toolFile.write(str(toolDict))
        else:
            toolFile = open(finalPath, "r")
            oldDict = toolFile.read()
            newDict = {}
            newDict[key] = dpart, ddesc
            strToDict = literal_eval(oldDict)
            finalDict = {**strToDict, **newDict}
            toolFile = open(finalPath, "w")
            toolFile.write(str(finalDict))


    def addPartToList(self):
        partList = self.toolDataBase()
        sel = self.dbSchemNumber.get().upper()
        list1 = []
        list1.append(str(self.toolBrand.get() + " " + self.toolModel.get()))
        list1.append(self.dbQuantity.get())
        temp = list(partList[sel])
        for x in temp:
            list1.append(x)
        self.finalPartsList.append(list1)
        self.currentList.configure(values=self.finalPartsList)
        self.counter = self.counter + 1
        self.currentList.current(self.counter)


    def delSelected(self):
        global counter
        #selected = self.finalPartsList.index(self.currentList.get())
        if self.counter == 0 or self.currentList.get() == "TOOL QUANTITY PART# DESCRIPTION":
            return 0
        else:
            #print(self.currentList.get())
            #print(self.finalPartsList)
            del self.finalPartsList[self.currentList.current()]
            self.currentList.configure(values=self.finalPartsList)
            self.counter = self.counter - 1
            self.currentList.current(self.counter)


    def dataAddcus(self):
        dbrand = self.toolBrand.get().upper()
        dmodel = self.toolModel.get().upper()
        key = self.cusSchemNum.get().upper()
        dpart = self.cusPartNum.get().upper()
        ddesc = self.cusDescription.get().upper()
        dir1 = dbrand
        check = dmodel.replace('/', '@')
        if not os.path.exists(self.path + "/" + "TOOL_DATABASE" + "/" + dir1):
            os.mkdir(self.path + "/" + "TOOL_DATABASE" + "/" + dir1)
            file1 = os.path.join(self.path + "/" + "TOOL_DATABASE" +
                                "/" + dir1, check)
        else:
            file1 = os.path.join(self.path + "/" + "TOOL_DATABASE" +
                                "/" + dir1, check)
        finalPath = file1
        if os.path.isfile(finalPath) == False:
            toolFile = open(finalPath, "w")
            toolDict = {}
            toolDict[key] = dpart, ddesc
            toolFile.write(str(toolDict))
        else:
            toolFile = open(finalPath, "r")
            oldDict = toolFile.read()
            newDict = {}
            newDict[key] = dpart, ddesc
            strToDict = literal_eval(oldDict)
            finalDict = {**strToDict, **newDict}
            toolFile = open(finalPath, "w")
            toolFile.write(str(finalDict))


    def isChecked(self):
        if self.check == False:
            self.check = True
        else:
            self.check = False


    def addCusPart(self):
        #partList = toolDataBase()
        list1 = []
        list1.append(self.toolBrand.get().upper() + " " + self.toolModel.get().upper())
        list1.append(self.cusQuantity.get())
        list1.append(self.cusPartNum.get().upper())
        list1.append(self.cusDescription.get().upper())
        self.finalPartsList.append(list1)
        self.currentList.configure(values=self.finalPartsList)
        self.counter = self.counter + 1
        self.currentList.current(self.counter)
        if self.check == True:
            self.dataAddcus()


    def schemFetch(self):
        modelFix = re.sub('[/!@#$.]', '', self.toolModel.get())
        filename = os.getcwd() + '/Schematics/' + self.toolBrand.get() + modelFix + '.pdf'
        os.startfile(filename)
        return 0


    def pdfMaker(self):
        # stuffx = a
        # print(type(stuffx))
        customer = self.billToE.get().upper()
        shipTo = self.shipTo.get().upper()
        dateOfOrder = self.date_of_order()
        pdfName = "parts order (" + customer + ") " + dateOfOrder + ".pdf"
        info = [["BILL: ", customer], ["SHIP: ", shipTo], ["DATE: ", dateOfOrder]]
        data = self.finalPartsList

        save_path = self.path + "/orders to be sent/" + pdfName

        pdf = SimpleDocTemplate(save_path, pagesize=letter)

        InFo = Table(info)
        table = Table(data)

        # add style

        style = TableStyle([
            ('BACKGROUND', (0, 0), (3, 0), colors.black),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),

            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),

            ('FONTNAME', (0, 0), (-1, 0), 'Courier-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 14),

            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),

            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ])
        table.setStyle(style)

        # 2) Alternate backgroud color
        rowNumb = len(data)
        for i in range(1, rowNumb):
            if i % 2 == 0:
                bc = colors.burlywood
            else:
                bc = colors.beige

            ts = TableStyle(
                [('BACKGROUND', (0, i), (-1, i), bc)]
            )
            table.setStyle(ts)

        # 3) Add borders
        ts = TableStyle(
            [
                ('BOX', (0, 0), (-1, -1), 2, colors.black),

                # ('LINEBEFORE', (4, 1), (4, -1), 2, colors.red),
                # ('LINEABOVE', (0, 1), (-1, 1), 2, colors.green),

                ('GRID', (0, 1), (-1, -1), 2, colors.black),
            ]
        )
        table.setStyle(ts)

        elems = []
        elems.append(InFo)
        elems.append(table)

        pdf.build(elems)


    def clearAllFields(self):
        self.toolModel.delete(0, "end")
        self.toolBrand.delete(0, "end")
        self.shipTo.delete(0, "end")
        self.billToE.delete(0, "end")
        self.dbSchemNumber.delete(0, "end")
        self.dbQuantity.delete(0, "end")
        self.cusQuantity.delete(0, "end")
        self.cusSchemNum.delete(0, "end")
        self.cusPartNum.delete(0, "end")
        self.cusDescription.delete(0, "end")
        while self.counter > 0:
            del self.finalPartsList[-1]
            self.currentList.configure(values=self.finalPartsList)
            self.counter = self.counter - 1
            self.currentList.current(self.counter)



    def mainClick(self):


        self.pdfMaker()

    

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1205x450+654+172")
        top.minsize(120, 1)
        top.maxsize(5564, 1901)
        top.resizable(0,  0)
        top.title("MePod v2.00")
        top.iconbitmap(str(self.path + '/EXE builder/icon.ico'))
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(x=0, y=0, height=448, width=1204)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(0, text="Order Maker", compound="left", underline="-1"
                ,)
        self.TNotebook1_t1.configure(background="#d9d9d9")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(1, text="Database Builder", compound="left"
                ,underline="-1", )
        self.TNotebook1_t2.configure(background="#d9d9d9")
        self.TNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t2.configure(highlightcolor="black")

        self.Canvas1 = tk.Canvas(self.TNotebook1_t1)
        self.Canvas1.place(x=0, y=0, height=433, width=1212)
        self.Canvas1.configure(background="#0080ff")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(confine="0")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="blue")
        self.Canvas1.configure(selectforeground="white")

        self.Canvas2 = tk.Canvas(self.Canvas1)
        self.Canvas2.place(x=30, y=20, height=131, width=307)
        self.Canvas2.configure(background="#ff8080")
        self.Canvas2.configure(borderwidth="2")
        self.Canvas2.configure(highlightbackground="#d9d9d9")
        self.Canvas2.configure(highlightcolor="black")
        self.Canvas2.configure(insertbackground="black")
        self.Canvas2.configure(relief="ridge")
        self.Canvas2.configure(selectbackground="blue")
        self.Canvas2.configure(selectforeground="white")

        self.Label1 = tk.Label(self.Canvas2)
        self.Label1.place(x=20, y=40, height=33, width=130)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#ff8080")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 14")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Where To Ship?''')

        self.shipTo = tk.Entry(self.Canvas2)
        self.shipTo.place(x=160, y=40, height=30, width=134)
        self.shipTo.configure(background="white")
        self.shipTo.configure(disabledforeground="#a3a3a3")
        self.shipTo.configure(font="-family {Courier New} -size 9")
        self.shipTo.configure(foreground="#000000")
        self.shipTo.configure(highlightbackground="#d9d9d9")
        self.shipTo.configure(highlightcolor="black")
        self.shipTo.configure(insertbackground="black")
        self.shipTo.configure(selectbackground="blue")
        self.shipTo.configure(selectforeground="white")

        self.Label2 = tk.Label(self.Canvas2)
        self.Label2.place(x=10, y=90, height=28, width=143)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#ff8080")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 14")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Customer To Bill?''')

        self.billToE = tk.Entry(self.Canvas2)
        self.billToE.place(x=160, y=90, height=30, width=134)
        self.billToE.configure(background="white")
        self.billToE.configure(disabledforeground="#a3a3a3")
        self.billToE.configure(font="TkFixedFont")
        self.billToE.configure(foreground="#000000")
        self.billToE.configure(highlightbackground="#d9d9d9")
        self.billToE.configure(highlightcolor="black")
        self.billToE.configure(insertbackground="black")
        self.billToE.configure(selectbackground="blue")
        self.billToE.configure(selectforeground="white")

        self.Label3 = tk.Label(self.Canvas2)
        self.Label3.place(x=10, y=10, height=29, width=164)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#ff8080")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 14 -weight bold -underline 1")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Shipping & Billing''')

        self.TSeparator1 = ttk.Separator(self.Canvas2)
        self.TSeparator1.place(x=172, y=28, width=0)

        self.Canvas2_1 = tk.Canvas(self.Canvas1)
        self.Canvas2_1.place(x=30, y=160, height=131, width=308)
        self.Canvas2_1.configure(background="#ff8080")
        self.Canvas2_1.configure(borderwidth="2")
        self.Canvas2_1.configure(highlightbackground="#d9d9d9")
        self.Canvas2_1.configure(highlightcolor="black")
        self.Canvas2_1.configure(insertbackground="black")
        self.Canvas2_1.configure(relief="ridge")
        self.Canvas2_1.configure(selectbackground="blue")
        self.Canvas2_1.configure(selectforeground="white")

        self.Label1_1 = tk.Label(self.Canvas2_1)
        self.Label1_1.place(x=30, y=50, height=33, width=80)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#ff8080")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(font="-family {Segoe UI} -size 14")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''Brand?''')

        self.Label2_1 = tk.Label(self.Canvas2_1)
        self.Label2_1.place(x=30, y=90, height=28, width=73)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(background="#ff8080")
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(font="-family {Segoe UI} -size 14")
        self.Label2_1.configure(foreground="#000000")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(text='''Model?''')

        self.Label3_1 = tk.Label(self.Canvas2_1)
        self.Label3_1.place(x=10, y=10, height=29, width=99)
        self.Label3_1.configure(activebackground="#f9f9f9")
        self.Label3_1.configure(activeforeground="black")
        self.Label3_1.configure(background="#ff8080")
        self.Label3_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1.configure(font="-family {Segoe UI} -size 14 -weight bold -underline 1")
        self.Label3_1.configure(foreground="#000000")
        self.Label3_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1.configure(highlightcolor="black")
        self.Label3_1.configure(text='''Tool Select''')

        self.TSeparator1_1 = ttk.Separator(self.Canvas2_1)
        self.TSeparator1_1.place(x=116, y=28, width=0)

        self.toolBrand = ttk.Combobox(self.Canvas2_1)
        self.toolBrand.place(x=110, y=50, height=28, width=185)
        self.toolBrand.configure(takefocus="")
        self.toolBrand.configure(values=self.ListA)
        self.toolBrand.bind("<<ComboboxSelected>>", self.modelList)

        self.toolModel = ttk.Combobox(self.Canvas2_1)
        self.toolModel.place(x=110, y=90, height=28, width=185)
        self.toolModel.configure(takefocus="")
        self.toolModel.configure(values=self.ListB)

        self.Canvas3 = tk.Canvas(self.Canvas1)
        self.Canvas3.place(x=740, y=20, height=196, width=448)
        self.Canvas3.configure(background="#ff8080")
        self.Canvas3.configure(borderwidth="2")
        self.Canvas3.configure(highlightbackground="#d9d9d9")
        self.Canvas3.configure(highlightcolor="black")
        self.Canvas3.configure(insertbackground="black")
        self.Canvas3.configure(relief="ridge")
        self.Canvas3.configure(selectbackground="blue")
        self.Canvas3.configure(selectforeground="white")

        self.Label5 = tk.Label(self.Canvas3)
        self.Label5.place(x=10, y=10, height=24, width=166)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#ff8080")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(font="-family {Segoe UI} -size 14 -weight bold -underline 1")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Add Custom Entry''')

        self.TSeparator2_1 = ttk.Separator(self.Canvas3)
        self.TSeparator2_1.place(x=177, y=24, width=0)

        self.Canvas3_1 = tk.Canvas(self.Canvas3)
        self.Canvas3_1.place(x=539, y=56, height=196, width=448)
        self.Canvas3_1.configure(background="#ff8080")
        self.Canvas3_1.configure(borderwidth="2")
        self.Canvas3_1.configure(highlightbackground="#d9d9d9")
        self.Canvas3_1.configure(highlightcolor="black")
        self.Canvas3_1.configure(insertbackground="black")
        self.Canvas3_1.configure(relief="ridge")
        self.Canvas3_1.configure(selectbackground="blue")
        self.Canvas3_1.configure(selectforeground="white")

        self.Label5_1 = tk.Label(self.Canvas3_1)
        self.Label5_1.place(x=18, y=6, height=14, width=193)
        self.Label5_1.configure(activebackground="#f9f9f9")
        self.Label5_1.configure(activeforeground="black")
        self.Label5_1.configure(background="#ff8080")
        self.Label5_1.configure(disabledforeground="#a3a3a3")
        self.Label5_1.configure(foreground="#000000")
        self.Label5_1.configure(highlightbackground="#d9d9d9")
        self.Label5_1.configure(highlightcolor="black")
        self.Label5_1.configure(text='''Add Custom Entry''')

        self.TSeparator2_1_1 = ttk.Separator(self.Canvas3_1)
        self.TSeparator2_1_1.place(x=204, y=13, width=0)

        self.Label3_2 = tk.Label(self.Canvas3)
        self.Label3_2.place(x=10, y=40, height=21, width=84)
        self.Label3_2.configure(activebackground="#f9f9f9")
        self.Label3_2.configure(activeforeground="black")
        self.Label3_2.configure(background="#ff8080")
        self.Label3_2.configure(disabledforeground="#a3a3a3")
        self.Label3_2.configure(font="-family {Segoe UI} -size 14")
        self.Label3_2.configure(foreground="#000000")
        self.Label3_2.configure(highlightbackground="#d9d9d9")
        self.Label3_2.configure(highlightcolor="black")
        self.Label3_2.configure(text='''Quantity?''')

        self.Label4 = tk.Label(self.Canvas3)
        self.Label4.place(x=220, y=40, height=21, width=113)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#ff8080")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Segoe UI} -size 14")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Schematic #?''')

        self.Label5_2 = tk.Label(self.Canvas3)
        self.Label5_2.place(x=10, y=100, height=21, width=124)
        self.Label5_2.configure(activebackground="#f9f9f9")
        self.Label5_2.configure(activeforeground="black")
        self.Label5_2.configure(background="#ff8080")
        self.Label5_2.configure(disabledforeground="#a3a3a3")
        self.Label5_2.configure(font="-family {Segoe UI} -size 14")
        self.Label5_2.configure(foreground="#000000")
        self.Label5_2.configure(highlightbackground="#d9d9d9")
        self.Label5_2.configure(highlightcolor="black")
        self.Label5_2.configure(text='''Part Number?''')

        self.Label6 = tk.Label(self.Canvas3)
        self.Label6.place(x=10, y=151, height=31, width=143)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#ff8080")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(font="-family {Segoe UI} -size 14")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''Part Description?''')

        self.cusQuantity = tk.Entry(self.Canvas3)
        self.cusQuantity.place(x=100, y=40, height=20, width=84)
        self.cusQuantity.configure(background="white")
        self.cusQuantity.configure(disabledforeground="#a3a3a3")
        self.cusQuantity.configure(font="TkFixedFont")
        self.cusQuantity.configure(foreground="#000000")
        self.cusQuantity.configure(highlightbackground="#d9d9d9")
        self.cusQuantity.configure(highlightcolor="black")
        self.cusQuantity.configure(insertbackground="black")
        self.cusQuantity.configure(selectbackground="blue")
        self.cusQuantity.configure(selectforeground="white")

        self.cusSchemNum = tk.Entry(self.Canvas3)
        self.cusSchemNum.place(x=340, y=40, height=20, width=94)
        self.cusSchemNum.configure(background="white")
        self.cusSchemNum.configure(disabledforeground="#a3a3a3")
        self.cusSchemNum.configure(font="TkFixedFont")
        self.cusSchemNum.configure(foreground="#000000")
        self.cusSchemNum.configure(highlightbackground="#d9d9d9")
        self.cusSchemNum.configure(highlightcolor="black")
        self.cusSchemNum.configure(insertbackground="black")
        self.cusSchemNum.configure(selectbackground="blue")
        self.cusSchemNum.configure(selectforeground="white")

        self.cusPartNum = tk.Entry(self.Canvas3)
        self.cusPartNum.place(x=140, y=100, height=20, width=84)
        self.cusPartNum.configure(background="white")
        self.cusPartNum.configure(disabledforeground="#a3a3a3")
        self.cusPartNum.configure(font="TkFixedFont")
        self.cusPartNum.configure(foreground="#000000")
        self.cusPartNum.configure(highlightbackground="#d9d9d9")
        self.cusPartNum.configure(highlightcolor="black")
        self.cusPartNum.configure(insertbackground="black")
        self.cusPartNum.configure(selectbackground="blue")
        self.cusPartNum.configure(selectforeground="white")

        self.cusDescription = tk.Entry(self.Canvas3)
        self.cusDescription.place(x=160, y=160, height=20, width=274)
        self.cusDescription.configure(background="white")
        self.cusDescription.configure(disabledforeground="#a3a3a3")
        self.cusDescription.configure(font="TkFixedFont")
        self.cusDescription.configure(foreground="#000000")
        self.cusDescription.configure(highlightbackground="#d9d9d9")
        self.cusDescription.configure(highlightcolor="black")
        self.cusDescription.configure(insertbackground="black")
        self.cusDescription.configure(selectbackground="blue")
        self.cusDescription.configure(selectforeground="white")

        self.addToDBCheck = tk.Checkbutton(self.Canvas3)
        self.addToDBCheck.place(x=270, y=100, height=25, width=171)
        self.addToDBCheck.configure(activebackground="#ececec")
        self.addToDBCheck.configure(activeforeground="#000000")
        self.addToDBCheck.configure(background="#ff8080")
        self.addToDBCheck.configure(disabledforeground="#a3a3a3")
        self.addToDBCheck.configure(font="-family {Segoe UI} -size 14")
        self.addToDBCheck.configure(foreground="#000000")
        self.addToDBCheck.configure(highlightbackground="#d9d9d9")
        self.addToDBCheck.configure(highlightcolor="black")
        self.addToDBCheck.configure(justify='left')
        self.addToDBCheck.configure(text='''Add To Database''')
        self.addToDBCheck.configure(command=self.isChecked)

        self.showSchem = tk.Button(self.Canvas1)
        self.showSchem.place(x=30, y=311, height=34, width=310)
        self.showSchem.configure(activebackground="#ececec")
        self.showSchem.configure(activeforeground="#000000")
        self.showSchem.configure(background="#ff8080")
        self.showSchem.configure(disabledforeground="#a3a3a3")
        self.showSchem.configure(font="-family {Segoe UI} -size 14")
        self.showSchem.configure(foreground="#000000")
        self.showSchem.configure(highlightbackground="#d9d9d9")
        self.showSchem.configure(highlightcolor="black")
        self.showSchem.configure(pady="0")
        self.showSchem.configure(text='''Show Shematic''')
        self.showSchem.configure(command=self.schemFetch)

        self.addPart = tk.Button(self.Canvas1)
        self.addPart.place(x=360, y=221, height=34, width=367)
        self.addPart.configure(activebackground="#ececec")
        self.addPart.configure(activeforeground="#000000")
        self.addPart.configure(background="#ff8080")
        self.addPart.configure(disabledforeground="#a3a3a3")
        self.addPart.configure(font="-family {Segoe UI} -size 14")
        self.addPart.configure(foreground="#000000")
        self.addPart.configure(highlightbackground="#d9d9d9")
        self.addPart.configure(highlightcolor="black")
        self.addPart.configure(pady="0")
        self.addPart.configure(text='''Add Part''')
        self.addPart.configure(command=self.addPartToList)

        self.Canvas3_2 = tk.Canvas(self.Canvas1)
        self.Canvas3_2.place(x=360, y=20, height=196, width=366)
        self.Canvas3_2.configure(background="#ff8080")
        self.Canvas3_2.configure(borderwidth="2")
        self.Canvas3_2.configure(highlightbackground="#d9d9d9")
        self.Canvas3_2.configure(highlightcolor="black")
        self.Canvas3_2.configure(insertbackground="black")
        self.Canvas3_2.configure(relief="ridge")
        self.Canvas3_2.configure(selectbackground="blue")
        self.Canvas3_2.configure(selectforeground="white")

        self.Label5_2_1 = tk.Label(self.Canvas3_2)
        self.Label5_2_1.place(x=10, y=10, height=23, width=179)
        self.Label5_2_1.configure(activebackground="#f9f9f9")
        self.Label5_2_1.configure(activeforeground="black")
        self.Label5_2_1.configure(background="#ff8080")
        self.Label5_2_1.configure(disabledforeground="#a3a3a3")
        self.Label5_2_1.configure(font="-family {Segoe UI} -size 14 -weight bold -underline 1")
        self.Label5_2_1.configure(foreground="#000000")
        self.Label5_2_1.configure(highlightbackground="#d9d9d9")
        self.Label5_2_1.configure(highlightcolor="black")
        self.Label5_2_1.configure(text='''Pull From Database''')

        self.Label1_2 = tk.Label(self.Canvas3_2)
        self.Label1_2.place(x=30, y=100, height=31, width=114)
        self.Label1_2.configure(activebackground="#f9f9f9")
        self.Label1_2.configure(activeforeground="black")
        self.Label1_2.configure(background="#ff8080")
        self.Label1_2.configure(disabledforeground="#a3a3a3")
        self.Label1_2.configure(font="-family {Segoe UI} -size 14")
        self.Label1_2.configure(foreground="#000000")
        self.Label1_2.configure(highlightbackground="#d9d9d9")
        self.Label1_2.configure(highlightcolor="black")
        self.Label1_2.configure(text='''Quantity?''')

        self.dbSchemNumber = tk.Entry(self.Canvas3_2)
        self.dbSchemNumber.place(x=210, y=50, height=20, width=114)
        self.dbSchemNumber.configure(background="white")
        self.dbSchemNumber.configure(disabledforeground="#a3a3a3")
        self.dbSchemNumber.configure(font="TkFixedFont")
        self.dbSchemNumber.configure(foreground="#000000")
        self.dbSchemNumber.configure(highlightbackground="#d9d9d9")
        self.dbSchemNumber.configure(highlightcolor="black")
        self.dbSchemNumber.configure(insertbackground="black")
        self.dbSchemNumber.configure(selectbackground="blue")
        self.dbSchemNumber.configure(selectforeground="white")

        self.Label2_2 = tk.Label(self.Canvas3_2)
        self.Label2_2.place(x=10, y=50, height=32, width=174)
        self.Label2_2.configure(activebackground="#f9f9f9")
        self.Label2_2.configure(activeforeground="black")
        self.Label2_2.configure(background="#ff8080")
        self.Label2_2.configure(disabledforeground="#a3a3a3")
        self.Label2_2.configure(font="-family {Segoe UI} -size 14")
        self.Label2_2.configure(foreground="#000000")
        self.Label2_2.configure(highlightbackground="#d9d9d9")
        self.Label2_2.configure(highlightcolor="black")
        self.Label2_2.configure(text='''Schematic Number?''')

        self.dbQuantity = tk.Entry(self.Canvas3_2)
        self.dbQuantity.place(x=190, y=110, height=20, width=114)
        self.dbQuantity.configure(background="white")
        self.dbQuantity.configure(disabledforeground="#a3a3a3")
        self.dbQuantity.configure(font="TkFixedFont")
        self.dbQuantity.configure(foreground="#000000")
        self.dbQuantity.configure(highlightbackground="#d9d9d9")
        self.dbQuantity.configure(highlightcolor="black")
        self.dbQuantity.configure(insertbackground="black")
        self.dbQuantity.configure(selectbackground="blue")
        self.dbQuantity.configure(selectforeground="white")

        self.TSeparator1_2 = ttk.Separator(self.Canvas3_2)
        self.TSeparator1_2.place(x=190, y=20, width=0)

        self.addCus = tk.Button(self.Canvas1)
        self.addCus.place(x=740, y=220, height=34, width=447)
        self.addCus.configure(activebackground="#ececec")
        self.addCus.configure(activeforeground="#000000")
        self.addCus.configure(background="#ff8080")
        self.addCus.configure(disabledforeground="#a3a3a3")
        self.addCus.configure(font="-family {Segoe UI} -size 14")
        self.addCus.configure(foreground="#000000")
        self.addCus.configure(highlightbackground="#d9d9d9")
        self.addCus.configure(highlightcolor="black")
        self.addCus.configure(pady="0")
        self.addCus.configure(text='''Add Custom Entry''')
        self.addCus.configure(command=self.addCusPart)

        self.createPDF = tk.Button(self.Canvas1)
        self.createPDF.place(x=621, y=271, height=74, width=470)
        self.createPDF.configure(activebackground="#ececec")
        self.createPDF.configure(activeforeground="#000000")
        self.createPDF.configure(background="#ff7575")
        self.createPDF.configure(disabledforeground="#a3a3a3")
        self.createPDF.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.createPDF.configure(foreground="#000000")
        self.createPDF.configure(highlightbackground="#d9d9d9")
        self.createPDF.configure(highlightcolor="black")
        self.createPDF.configure(pady="0")
        self.createPDF.configure(text='''Create PDF''')
        self.createPDF.configure(command=self.mainClick)

        self.Canvas1_1 = tk.Canvas(self.Canvas1)
        self.Canvas1_1.place(x=30, y=362, height=53, width=1154)
        self.Canvas1_1.configure(background="#ff8080")
        self.Canvas1_1.configure(borderwidth="2")
        self.Canvas1_1.configure(highlightbackground="#d9d9d9")
        self.Canvas1_1.configure(highlightcolor="black")
        self.Canvas1_1.configure(insertbackground="black")
        self.Canvas1_1.configure(relief="ridge")
        self.Canvas1_1.configure(selectbackground="blue")
        self.Canvas1_1.configure(selectforeground="white")

        self.currentList = ttk.Combobox(self.Canvas1_1)
        self.currentList.place(x=14, y=15, height=23, width=1126)
        self.currentList.configure(values=self.finalPartsList)
        self.currentList.current(0)

        self.remSelected = tk.Button(self.Canvas1)
        self.remSelected.place(x=360, y=270, height=74, width=240)
        self.remSelected.configure(activebackground="#ececec")
        self.remSelected.configure(activeforeground="#000000")
        self.remSelected.configure(background="#ff8080")
        self.remSelected.configure(disabledforeground="#a3a3a3")
        self.remSelected.configure(font="-family {Segoe UI} -size 14")
        self.remSelected.configure(foreground="#000000")
        self.remSelected.configure(highlightbackground="#d9d9d9")
        self.remSelected.configure(highlightcolor="black")
        self.remSelected.configure(pady="0")
        self.remSelected.configure(text='''Remove Selected Entry''')
        self.remSelected.configure(command=self.delSelected)

        self.clearAll = tk.Button(self.Canvas1)
        self.clearAll.place(x=1100, y=270, height=74, width=90)
        self.clearAll.configure(activebackground="#ececec")
        self.clearAll.configure(activeforeground="#000000")
        self.clearAll.configure(background="#ff8080")
        self.clearAll.configure(disabledforeground="#a3a3a3")
        self.clearAll.configure(font="-family {Segoe UI} -size 14")
        self.clearAll.configure(foreground="#000000")
        self.clearAll.configure(highlightbackground="#d9d9d9")
        self.clearAll.configure(highlightcolor="black")
        self.clearAll.configure(pady="0")
        self.clearAll.configure(text='''Clear All''')
        self.clearAll.configure(command=self.clearAllFields)

        self.Label7 = tk.Label(self.TNotebook1_t2)
        self.Label7.place(x=90, y=20, height=21, width=94)
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(font="-family {Segoe UI} -size 14")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(text='''Tool Brand''')

        self.dBuilderBrand = tk.Entry(self.TNotebook1_t2)
        self.dBuilderBrand.place(x=200, y=20, height=20, width=144)
        self.dBuilderBrand.configure(background="white")
        self.dBuilderBrand.configure(disabledforeground="#a3a3a3")
        self.dBuilderBrand.configure(font="TkFixedFont")
        self.dBuilderBrand.configure(foreground="#000000")
        self.dBuilderBrand.configure(insertbackground="black")

        self.Label8 = tk.Label(self.TNotebook1_t2)
        self.Label8.place(x=410, y=20, height=21, width=94)
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(font="-family {Segoe UI} -size 13")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(highlightbackground="#f0f0f0f0f0f0")
        self.Label8.configure(text='''Tool Model''')

        self.dBuilderModel = tk.Entry(self.TNotebook1_t2)
        self.dBuilderModel.place(x=520, y=20, height=20, width=174)
        self.dBuilderModel.configure(background="white")
        self.dBuilderModel.configure(disabledforeground="#a3a3a3")
        self.dBuilderModel.configure(font="TkFixedFont")
        self.dBuilderModel.configure(foreground="#000000")
        self.dBuilderModel.configure(highlightbackground="#d9d9d9")
        self.dBuilderModel.configure(highlightcolor="black")
        self.dBuilderModel.configure(insertbackground="black")
        self.dBuilderModel.configure(selectbackground="blue")
        self.dBuilderModel.configure(selectforeground="white")

        self.Label9 = tk.Label(self.TNotebook1_t2)
        self.Label9.place(x=20, y=60, height=21, width=164)
        self.Label9.configure(background="#d9d9d9")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(font="-family {Segoe UI} -size 14")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(text='''Schematic Number''')

        self.dBuilderSchemNum = tk.Entry(self.TNotebook1_t2)
        self.dBuilderSchemNum.place(x=200, y=60, height=20, width=144)
        self.dBuilderSchemNum.configure(background="white")
        self.dBuilderSchemNum.configure(disabledforeground="#a3a3a3")
        self.dBuilderSchemNum.configure(font="TkFixedFont")
        self.dBuilderSchemNum.configure(foreground="#000000")
        self.dBuilderSchemNum.configure(highlightbackground="#d9d9d9")
        self.dBuilderSchemNum.configure(highlightcolor="black")
        self.dBuilderSchemNum.configure(insertbackground="black")
        self.dBuilderSchemNum.configure(selectbackground="blue")
        self.dBuilderSchemNum.configure(selectforeground="white")

        self.Label10 = tk.Label(self.TNotebook1_t2)
        self.Label10.place(x=390, y=60, height=21, width=114)
        self.Label10.configure(background="#d9d9d9")
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(font="-family {Segoe UI} -size 14")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(text='''Part Number''')

        self.dBuilderPartNum = tk.Entry(self.TNotebook1_t2)
        self.dBuilderPartNum.place(x=520, y=60, height=20, width=174)
        self.dBuilderPartNum.configure(background="white")
        self.dBuilderPartNum.configure(disabledforeground="#a3a3a3")
        self.dBuilderPartNum.configure(font="TkFixedFont")
        self.dBuilderPartNum.configure(foreground="#000000")
        self.dBuilderPartNum.configure(highlightbackground="#d9d9d9")
        self.dBuilderPartNum.configure(highlightcolor="black")
        self.dBuilderPartNum.configure(insertbackground="black")
        self.dBuilderPartNum.configure(selectbackground="blue")
        self.dBuilderPartNum.configure(selectforeground="white")

        self.Label11 = tk.Label(self.TNotebook1_t2)
        self.Label11.place(x=80, y=100, height=21, width=104)
        self.Label11.configure(background="#d9d9d9")
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(font="-family {Segoe UI} -size 14")
        self.Label11.configure(foreground="#000000")
        self.Label11.configure(text='''Description''')

        self.dBuilderDes = tk.Entry(self.TNotebook1_t2)
        self.dBuilderDes.place(x=200, y=100, height=20, width=494)
        self.dBuilderDes.configure(background="white")
        self.dBuilderDes.configure(disabledforeground="#a3a3a3")
        self.dBuilderDes.configure(font="TkFixedFont")
        self.dBuilderDes.configure(foreground="#000000")
        self.dBuilderDes.configure(insertbackground="black")

        self.dBuilderAdd = tk.Button(self.TNotebook1_t2)
        self.dBuilderAdd.place(x=710, y=20, height=94, width=167)
        self.dBuilderAdd.configure(activebackground="#ececec")
        self.dBuilderAdd.configure(activeforeground="#000000")
        self.dBuilderAdd.configure(background="#d9d9d9")
        self.dBuilderAdd.configure(cursor="fleur")
        self.dBuilderAdd.configure(disabledforeground="#a3a3a3")
        self.dBuilderAdd.configure(font="-family {Segoe UI} -size 14")
        self.dBuilderAdd.configure(foreground="#000000")
        self.dBuilderAdd.configure(highlightbackground="#d9d9d9")
        self.dBuilderAdd.configure(highlightcolor="black")
        self.dBuilderAdd.configure(pady="0")
        self.dBuilderAdd.configure(text='''Add To Database''')

        self.dBuilderDict = ttk.Combobox(self.TNotebook1_t2)
        self.dBuilderDict.place(x=70, y=210, height=21, width=1013)
        self.dBuilderDict.configure(takefocus="")




if __name__ == '__main__':
    vp_start_gui()





